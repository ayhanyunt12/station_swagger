# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Station(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, public_id: int=None, name: str=None, lang: float=None, latd: float=None):  # noqa: E501
        """Station - a model defined in Swagger

        :param id: The id of this Station.  # noqa: E501
        :type id: int
        :param public_id: The public_id of this Station.  # noqa: E501
        :type public_id: int
        :param name: The name of this Station.  # noqa: E501
        :type name: str
        :param lang: The lang of this Station.  # noqa: E501
        :type lang: float
        :param latd: The latd of this Station.  # noqa: E501
        :type latd: float
        """
        self.swagger_types = {
            'id': int,
            'public_id': int,
            'name': str,
            'lang': float,
            'latd': float
        }

        self.attribute_map = {
            'id': 'id',
            'public_id': 'public_id',
            'name': 'name',
            'lang': 'lang',
            'latd': 'latd'
        }

        self._id = id
        self._public_id = public_id
        self._name = name
        self._lang = lang
        self._latd = latd

    @classmethod
    def from_dict(cls, dikt) -> 'Station':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Station of this Station.  # noqa: E501
        :rtype: Station
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Station.


        :return: The id of this Station.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Station.


        :param id: The id of this Station.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def public_id(self) -> int:
        """Gets the public_id of this Station.


        :return: The public_id of this Station.
        :rtype: int
        """
        return self._public_id

    @public_id.setter
    def public_id(self, public_id: int):
        """Sets the public_id of this Station.


        :param public_id: The public_id of this Station.
        :type public_id: int
        """
        if public_id is None:
            raise ValueError("Invalid value for `public_id`, must not be `None`")  # noqa: E501

        self._public_id = public_id

    @property
    def name(self) -> str:
        """Gets the name of this Station.


        :return: The name of this Station.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Station.


        :param name: The name of this Station.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def lang(self) -> float:
        """Gets the lang of this Station.


        :return: The lang of this Station.
        :rtype: float
        """
        return self._lang

    @lang.setter
    def lang(self, lang: float):
        """Sets the lang of this Station.


        :param lang: The lang of this Station.
        :type lang: float
        """
        if lang is None:
            raise ValueError("Invalid value for `lang`, must not be `None`")  # noqa: E501

        self._lang = lang

    @property
    def latd(self) -> float:
        """Gets the latd of this Station.


        :return: The latd of this Station.
        :rtype: float
        """
        return self._latd

    @latd.setter
    def latd(self, latd: float):
        """Sets the latd of this Station.


        :param latd: The latd of this Station.
        :type latd: float
        """
        if latd is None:
            raise ValueError("Invalid value for `latd`, must not be `None`")  # noqa: E501

        self._latd = latd
