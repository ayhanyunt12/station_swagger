# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.station import Station  # noqa: F401,E501
from swagger_server import util


class StationData1h(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, station_id: Station=None, time: str=None, temperature: float=None, felt_temperature: float=None, windspeed: float=None, precipitation_probability: int=None):  # noqa: E501
        """StationData1h - a model defined in Swagger

        :param station_id: The station_id of this StationData1h.  # noqa: E501
        :type station_id: Station
        :param time: The time of this StationData1h.  # noqa: E501
        :type time: str
        :param temperature: The temperature of this StationData1h.  # noqa: E501
        :type temperature: float
        :param felt_temperature: The felt_temperature of this StationData1h.  # noqa: E501
        :type felt_temperature: float
        :param windspeed: The windspeed of this StationData1h.  # noqa: E501
        :type windspeed: float
        :param precipitation_probability: The precipitation_probability of this StationData1h.  # noqa: E501
        :type precipitation_probability: int
        """
        self.swagger_types = {
            'station_id': Station,
            'time': str,
            'temperature': float,
            'felt_temperature': float,
            'windspeed': float,
            'precipitation_probability': int
        }

        self.attribute_map = {
            'station_id': 'station_id',
            'time': 'time',
            'temperature': 'temperature',
            'felt_temperature': 'felt_temperature',
            'windspeed': 'windspeed',
            'precipitation_probability': 'precipitation_probability'
        }

        self._station_id = station_id
        self._time = time
        self._temperature = temperature
        self._felt_temperature = felt_temperature
        self._windspeed = windspeed
        self._precipitation_probability = precipitation_probability

    @classmethod
    def from_dict(cls, dikt) -> 'StationData1h':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Station_data_1h of this StationData1h.  # noqa: E501
        :rtype: StationData1h
        """
        return util.deserialize_model(dikt, cls)

    @property
    def station_id(self) -> Station:
        """Gets the station_id of this StationData1h.


        :return: The station_id of this StationData1h.
        :rtype: Station
        """
        return self._station_id

    @station_id.setter
    def station_id(self, station_id: Station):
        """Sets the station_id of this StationData1h.


        :param station_id: The station_id of this StationData1h.
        :type station_id: Station
        """
        if station_id is None:
            raise ValueError("Invalid value for `station_id`, must not be `None`")  # noqa: E501

        self._station_id = station_id

    @property
    def time(self) -> str:
        """Gets the time of this StationData1h.


        :return: The time of this StationData1h.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time: str):
        """Sets the time of this StationData1h.


        :param time: The time of this StationData1h.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def temperature(self) -> float:
        """Gets the temperature of this StationData1h.


        :return: The temperature of this StationData1h.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this StationData1h.


        :param temperature: The temperature of this StationData1h.
        :type temperature: float
        """
        if temperature is None:
            raise ValueError("Invalid value for `temperature`, must not be `None`")  # noqa: E501

        self._temperature = temperature

    @property
    def felt_temperature(self) -> float:
        """Gets the felt_temperature of this StationData1h.


        :return: The felt_temperature of this StationData1h.
        :rtype: float
        """
        return self._felt_temperature

    @felt_temperature.setter
    def felt_temperature(self, felt_temperature: float):
        """Sets the felt_temperature of this StationData1h.


        :param felt_temperature: The felt_temperature of this StationData1h.
        :type felt_temperature: float
        """
        if felt_temperature is None:
            raise ValueError("Invalid value for `felt_temperature`, must not be `None`")  # noqa: E501

        self._felt_temperature = felt_temperature

    @property
    def windspeed(self) -> float:
        """Gets the windspeed of this StationData1h.


        :return: The windspeed of this StationData1h.
        :rtype: float
        """
        return self._windspeed

    @windspeed.setter
    def windspeed(self, windspeed: float):
        """Sets the windspeed of this StationData1h.


        :param windspeed: The windspeed of this StationData1h.
        :type windspeed: float
        """
        if windspeed is None:
            raise ValueError("Invalid value for `windspeed`, must not be `None`")  # noqa: E501

        self._windspeed = windspeed

    @property
    def precipitation_probability(self) -> int:
        """Gets the precipitation_probability of this StationData1h.


        :return: The precipitation_probability of this StationData1h.
        :rtype: int
        """
        return self._precipitation_probability

    @precipitation_probability.setter
    def precipitation_probability(self, precipitation_probability: int):
        """Sets the precipitation_probability of this StationData1h.


        :param precipitation_probability: The precipitation_probability of this StationData1h.
        :type precipitation_probability: int
        """
        if precipitation_probability is None:
            raise ValueError("Invalid value for `precipitation_probability`, must not be `None`")  # noqa: E501

        self._precipitation_probability = precipitation_probability
